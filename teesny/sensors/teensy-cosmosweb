//library imports 
#include <TMP36.h>
#include <Bridge.h>
#include <Console.h>
#include <Adafruit_GPS.h>
#include <ArduinoJson.h>

#include <Ethernet.h>
#include <EthernetUdp.h>

//defines
#define GPSSerial Serial1
#define GPSECHO false

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(192, 168, 1, 60);
unsigned int localPort = 8888;      // local port to listen on

// An EthernetUDP instance to let us send and receive packets over UDP
EthernetUDP Udp;

//gps variable
Adafruit_GPS GPS(&GPSSerial);
StaticJsonDocument<200> Temp;


TMP36 myTMP36(A0, 3.3);
uint32_t timer = millis();


void DisplayGPS();
void DisplayTemp();

void setup() { 

  // start the Ethernet
  Ethernet.begin(mac, ip);
  
  Bridge.begin();
  Console.begin();
  
  Serial.begin(115200);
  Serial.println("Adafruit GPS library basic parsing test!");
  GPS.begin(9600);
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
  GPS.sendCommand(PGCMD_ANTENNA);
  delay(1000);
  GPSSerial.println(PMTK_Q_RELEASE);

  // Check for Ethernet hardware present
  if (Ethernet.hardwareStatus() == EthernetNoHardware) {
    Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
    while (true) {
      delay(1); // do nothing, no point running without Ethernet hardware
    }
  }
  if (Ethernet.linkStatus() == LinkOFF) {
    Serial.println("Ethernet cable is not connected.");
  }
  
  // start UDP
  Udp.begin(localPort);
}

void loop() {


//get Temperature In C
float celsius = myTMP36.getTempC();
//Get Temperature IN F
float fahrenheit = myTMP36.getTempF();

//get GPS DATA ************************
char c = GPS.read();
  if (GPSECHO)
    if (c) Serial.print(c);
  if (GPS.newNMEAreceived()) {
    Serial.print(GPS.lastNMEA()); 
    if (!GPS.parse(GPS.lastNMEA())) 
      return;
   }
 if (millis() - timer > 2000) {
 timer = millis(); // reset the timer
 Serial.print("\nTime: ");
 if (GPS.hour < 10) { Serial.print('0'); }
 Serial.print(GPS.hour, DEC); Serial.print(':');
 if (GPS.minute < 10) { Serial.print('0'); }
 Serial.print(GPS.minute, DEC); Serial.print(':');
 if (GPS.seconds < 10) { Serial.print('0'); }
 Serial.print(GPS.seconds, DEC); Serial.print('.');
 if (GPS.milliseconds < 10) {
   Serial.print("00");
 } else if (GPS.milliseconds > 9 && GPS.milliseconds < 100) {
   Serial.print("0");
 }
  
 Serial.println(GPS.milliseconds);
 Serial.print("Date: ");
 Serial.print(GPS.day, DEC); Serial.print('/');
 Serial.print(GPS.month, DEC); Serial.print("/20");
 Serial.println(GPS.year, DEC);
 Serial.print("Fix: "); Serial.print((int)GPS.fix);
 Serial.print(" quality: "); Serial.println((int)GPS.fixquality);
 
  if (GPS.fix) {
    //gps Data is fixed 
    Serial.print("Location: ");
    Serial.print(GPS.latitude, 4); Serial.print(GPS.lat);
    Serial.print(", ");
    Serial.print(GPS.longitude, 4); Serial.println(GPS.lon);
    Serial.print("Speed (knots): "); Serial.println(GPS.speed);
    Serial.print("Angle: "); Serial.println(GPS.angle);
    Serial.print("Altitude: "); Serial.println(GPS.altitude);
    Serial.print("Satellites: "); Serial.println((int)GPS.satellites);

    //build packet when all data is ready 
    String Packet  = buildPacketJson(String(GPS.lat), String(GPS.lon), String(GPS.angle),String(GPS.speed), String(GPS.altitude) ,String(celsius),String(fahrenheit))
    //display packet on serial Monitor : 
    Serial.println(Packet);
    //**send packet over UDP**//
    Udp.beginPacket("PUT IP ADDRESS OF RECEUVER", "PUT PORT HERE");
    Udp.write(Packer.c_str());
    Udp.endPacket();
    

    }

  }
}
String addApo(String text)
{
  return "\"" + text + "\"";
}

//build json packet for all sensor DATA
String buildPacketJson(String latitude, String longitude, String angle, String speed,String altitude, String temperatureC , String temperatureF)
{
  return "{"
        + addApo("latitude") + ":" + addApo(latitude) + ","
        + addApo("longitude") + ":" + addApo(longitude) + ","
        + addApo("angle") + ":" + addApo(angle) + ","
        + addApo("speed") + ":" + addApo(speed) + ","
        + addApo("altitude") + ":" + addApo(altitude) + ","
        + addApo("temperatureC") + ":" + addApo(temperatureC) + ","
        + addApo("temperatureF") + ":" + addApo(temperatureF) + ","
        + "}";
}

//void getTempC(){
// float celsius = myTMP36.getTempC();   
//float fahrenheit = myTMP36.getTempF(); 
//Temp["name"] = "Temperature";
//Temp["CelsiusValue"] = celsius;
//Temp["FahrenheitValue"] = fahrenheit;
//serializeJson(Temp, Serial);
//delay(500);
//  
//  }
